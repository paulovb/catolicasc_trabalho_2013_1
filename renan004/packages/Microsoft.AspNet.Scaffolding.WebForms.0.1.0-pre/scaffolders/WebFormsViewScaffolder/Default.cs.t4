<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="aspx" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<# var viewDataType = (EnvDTE.CodeType) Model.ViewDataType; #>
<# var fullModelName = Model.Namespace+"."+Model.ViewDataTypeName; #>
<#
int CPHCounter = 1;
if(Model.IsContentPage) {
#>
<%@ Page Title="<#= Model.ViewDataTypeName #>List" Language="C#" MasterPageFile="~/<#= Model.MasterPageFile #>" CodeBehind="Default.aspx.cs" Inherits="<#= Model.DefaultNamespace #>.<#=Model.ViewDataTypeName#>Actions.Default" ViewStateMode="Disabled" %>

<#
    foreach(string cphid in Model.SectionNames) {
        if(cphid.Equals("HeadContent", StringComparison.OrdinalIgnoreCase)) {
#>
<asp:Content runat="server" ID="Content<#= CPHCounter #>" ContentPlaceHolderID="<#= cphid #>">
</asp:Content>

<#
            CPHCounter++;
        }
    }
#>
<asp:Content runat="server" ID="Content<#= CPHCounter #>" ContentPlaceHolderID="<#= Model.PrimarySectionName #>">
<#
} else {
#>
<%@ Page Title="<#= Model.ViewDataTypeName #>List" Language="C#" CodeBehind="Default.aspx.cs" Inherits="<#= Model.DefaultNamespace #>.<#=Model.ViewDataTypeName#>Actions.Default" ViewStateMode="Disabled" %>
<!DOCTYPE html>

<html>
<head runat="server">
    <title></title>
</head>
<body>
    <form runat="server" id="form1">
<#
    PushIndent("    ");
}
#>
    <h2><#= Model.PluralizedName #> List</h2>
    <p>
        <asp:HyperLink runat="server" NavigateUrl="Insert" Text="Create new" />
    </p>
    <div>
        <asp:ListView runat="server"
            DataKeyNames="<#= Model.PrimaryKeyName #>" ItemType="<#=fullModelName#>"
            AutoGenerateColumns="false"
            AllowPaging="true" AllowSorting="true"
            SelectMethod="GetData">
            <EmptyDataTemplate>
                There are no entries found for <#= Model.PluralizedName #> List
            </EmptyDataTemplate>
            <LayoutTemplate>
                <table>
                    <thead>
                        <tr>
<#
List<ModelProperty> properties = GetModelProperties(Model.ViewDataType, includeUnbindableProperties: true);
foreach (ModelProperty property in properties) {
    if (!property.IsPrimaryKey && !property.IsForeignKey) {
#>
                            <th><#= property.Name #></th>
<#
    }
}
#>
                            <th>&nbsp;</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr runat="server" id="itemPlaceholder" />
                    </tbody>
                </table>
            </LayoutTemplate>
            <ItemTemplate>
                <tr>
<#
 properties = GetModelProperties(Model.ViewDataType, true);
foreach (ModelProperty property in properties) {
    if (!property.IsPrimaryKey && !property.IsForeignKey) {
#>
                    <td>
                        <asp:DynamicControl runat="server" DataField="<#= property.Name #>" ID="<#= property.Name #>" Mode="ReadOnly" />
                    </td>
<#
    }
}
#>
                    <td>
                        <asp:HyperLink runat="server" NavigateUrl='<%# FriendlyUrl.Href("~/<#= Model.ViewsFolderName #>/<#= Model.ViewDataTypeName #>/Edit", Item.<#= Model.PrimaryKeyName #>) %>' Text="edit" />
                        <asp:HyperLink runat="server" NavigateUrl='<%# FriendlyUrl.Href("~/<#= Model.ViewsFolderName #>/<#= Model.ViewDataTypeName #>/Delete", Item.<#= Model.PrimaryKeyName #>) %>' Text="delete" />
                    </td>
                </tr>
            </ItemTemplate>
        </asp:ListView>
    </div>
<#
// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page
#>
<#
if(Model.IsContentPage) {
#>
</asp:Content>
<#
    foreach(string cphid in Model.SectionNames) {
        if(!cphid.Equals("HeadContent", StringComparison.OrdinalIgnoreCase) && !cphid.Equals(Model.PrimarySectionName, StringComparison.OrdinalIgnoreCase)) {
            CPHCounter++;
#>

<asp:Content runat="server" id="Content<#= CPHCounter #>" ContentPlaceHolderID="<#= cphid #>">
</asp:Content>
<#
        }
    }
#>
<#
} else if(!Model.IsContentPage) {
    ClearIndent();
#>
    </form>
</body>
</html>
<#
}
#>
<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
    public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {

    List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);
	
	foreach (ModelProperty prop in results) {
        if (prop.Type.UnderlyingTypeIs<double>() || prop.Type.UnderlyingTypeIs<decimal>()) {
            prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
        }
        else if (prop.Type.UnderlyingTypeIs<DateTime>()) {
            prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
        }
		else if (!IsBindableType(prop.Type)) {
			prop.ValueExpression = GetValueExpression("Model." + prop.Name, (EnvDTE.CodeType)prop.Type.CodeType);
		}
    }
	       
    return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return "Html.DisplayTextFor(_ => " + propertyExpression + ").ToString()";
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					ValueExpression = "Model." + prop.Name,
					Type = prop.Type,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = false, //TODO: Correct the logic that checks this
					IsReadOnly = !prop.IsWriteable()
				});
			}
		}
	}

    return results;
}

// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
    return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}
#>